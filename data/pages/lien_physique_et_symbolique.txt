{{tag>BROUILLON}}

----

====== Syntaxe des liens physiques ou symboliques ======

<note warning>Attention, ce tutoriel est Ã  l'Ã©tat d'Ã©bauche !</note>
I. Lien symbolique entre rÃ©pertoire
Dâ€™une maniÃ¨re gÃ©nÃ©rale, voici comment utiliser la commande Â« ln Â» pour crÃ©er un lien symbolique :

ln -s dossier_cible nom_du_lien
Dans le contexte de mon exemple, je souhaite quâ€™en allant sur le rÃ©pertoire /opt/jdk, jâ€™atterrisse en rÃ©alitÃ© sur /opt/jdk1_7.2. Cela permet de facilement gÃ©rer le changement de version de JAVA. Mais ce nâ€™est quâ€™un exemple ğŸ™‚

Nous allons commencer par crÃ©er lien symbolique entre deux rÃ©pertoires. Nous utiliserons pour cela la commande Â« ln Â» (links) :

ln â€“s /root/jdk1_7.2 /root/jdk
Le lien symbolique Â« /root/jdk Â» sera alors crÃ©Ã©.
===== DÃ©finitions =====

Il existe deux types de liens qui permettent de rediriger un fichier vers un autre : les **liens physiques** (ou matÃ©riels) et les **liens symboliques**. 

Avec un lien physique les donnÃ©es du disque sont pointÃ©es par plusieurs entrÃ©es de rÃ©pertoire, contrairement Ã  ce qui se passe avec un lien symbolique, .

Un lien matÃ©riel (ou physique) est l'information exacte elle-mÃªme, situÃ©e Ã  la mÃªme position sur le disque dur. Avec un lien physique, vous pouvez copier certaines donnÃ©es du fichier cible, effacer le reste du fichier, et il continuera Ã  exister. 

Un lien symbolique est un fichier qui pointe vers un autre fichier ; si vous supprimez le fichier cible, les liens symboliques pointeront alors vers un fichier inexistant.

Mais, d'aprÃ¨s la documentation originale, il est plus facile de distinguer les diffÃ©rences entre un tout petit lien symbolique et le fichier cible, que les diffÃ©rences entre plusieurs liens matÃ©riels. En fait, c'est impossible Ã  distinguer, car il s'agit exactement de la mÃªme chose.

  * **Lien physique** : permet de donner plusieurs noms/chemin d'accÃ¨s, Ã  un mÃªme fichier en pointant sur un numÃ©ro de fichier, (en interne Linux enregistre les fichiers sur la base d'un numÃ©ro et pas sur la base d'un nom). Un fichier peut donc avoir plusieurs noms, et existera tant qu'il a au moins un nom. Contrairement aux liens symboliques, **ils ne peuvent pointer que vers un autre Ã©lÃ©ment du mÃªme systÃ¨me de fichiers.**

Voici le rÃ©sultat obtenu en entrant la commande **ls** avec l'option -i (ou - -inode) qui permet d'afficher le numÃ©ro d'inode dans le systÃ¨me de fichiers:

<code> dupont@dupont-pc:~$ ls -i ~/fichiersource ~/Bureau/monlienphysique 
5954521 ~/fichiersource       5954521 ~/Bureau/monlienphysique
</code>

Comme dit plus haut, les diffÃ©rents liens physiques pointent vers un **mÃªme** numÃ©ro d'index.


  * **Lien symbolique** : permet d'attribuer un autre chemin d'accÃ¨s Ã  un fichier en pointant sur un nom de fichier. 

Voici le rÃ©sultat obtenu en entrant la mÃªme commande **ls -i**
 
<code> dupont@dupont-pc:~$ ls -i ~/fichiersource ~/Bureau/monliensymbolique 
5954521 ~/fichiersource       6876911 ~/Bureau/monliensymbolique
</code>

On voit que les deux fichiers pointent vers deux numÃ©ros d'inode **diffÃ©rents**.

<note help>Dans quels cas est-il plus judicieux d'utiliser un lien symbolique plutÃ´t qu'un lien physique, et vice-versa ? 

RÃ©ponse partielle 1 : dans les environnements graphiques (Dolphin etc) on ne trouve pas l'option pour crÃ©er de lien fixe ... et je le regrette parfois.

RÃ©ponse partielle 2 : les liens symboliques permettent une meilleure maintenance de l'espace disque. Avec des liens en dur partout, il deviendrait difficile de savoir si on a effectivement vraiment effacÃ© un fichier du disque.

RÃ©ponse partielle 3 : Dans le cas ou le lien doit pointer vers un autre systÃ¨me de fichiers (autre partition ou autre support de stockage) seul le lien symbolique est possible. 

RÃ©ponse partielle 4 : Dans la gestion des sauvegardes, les liens symboliques ne sont gÃ©nÃ©ralement pas suivis, ce qui permet d'Ã©viter de sauvegarder les mÃªmes fichiers plusieurs fois. 

RÃ©ponse partielle 5 : Par contre, dans certains cas particulier, il faut passer par le lien physique pour que la sauvegarde fonctionne. Il faut alors passer par la console (ligne de commande ou "mc" Ã  installer et essayer). Exemple : je sauvegarde rÃ©guliÃ¨rement "/etc", mais quelques rares paquets demandent un peu de configuration dans "/var/lib..." je met alors des liens en dur dans un sous-rÃ©pertoire ad-hoc de mon etc, pour que leur sauvegarde soit comprise avec.

RÃ©ponse partielle 6 : Le systÃ¨me de sauvegarde "rsnapshot" utilise les liens physiques, et c'est vraiment bien, renseignez vous. Mais ici c'est gÃ©rÃ© par le script, ce n'est pas votre problÃ¨me.

</note>

===== Explication graphique =====
=== situation de dÃ©part ===
fichier source : [source]-->[secteur n du disque]
=== situation aprÃ¨s crÃ©ation des liens ===
lien physique/dur : [source]-->[secteur n du disque]<-- [lien_dur]

lien symbolique : [lien_symb]-->[source]-->[secteur n du disque]

=== situation aprÃ¨s effacement du fichier source ===

lien physique/dur : [lien_dur]-->[secteur n du disque]

lien symbolique : [lien_symb]-->?

=== situation aprÃ¨s renommage ou dÃ©placement du fichier source ===

lien physique/dur : [source_modif]-->[secteur n du disque]<-- [lien_dur]

lien symbolique : [lien_symb]-->?       [source_modif]-->[secteur n du disque]

<note important>Malheureusement les liens symboliques ne sont pas mis Ã  jour lorsque le fichier source est dÃ©placÃ© ou renommÃ©. Il faut les recrÃ©er.</note>
===== PrÃ©-requis pour l'exemple =====

On montrera cela par un exemple simple :

On crÃ©e un document texte (ici la liste des paquets installÃ©s) dans le home :

   dpkg -l>source

===== Exemple de lien physique =====

On crÃ©e un lien physique (que l'on nomme lien_dur)
   ln source lien_dur

Maintenant, on peut Ã©galement lire le document source Ã  partir de lien_dur
   gedit lien_dur

Il est possible de connaÃ®tre le nombre de liens qui amÃ¨nent au mÃªme fichier :
   ls -l source
   ls -l lien_dur
Si on souhaite effacer le fichier source, le document existera toujours :
   rm source
   gedit lien_dur

===== Exemple de lien symbolique =====

Le lien symbolique s'utilise Ã©galement avec ln, en ajoutant toutefois l'option -s. 

On crÃ©e un lien symbolique (que l'on nomme lien_symb)
   dpkg -l>source
   ln -s source lien_symb

On pourra toujours lire source depuis lien_symb
   gedit lien_symb

Mais Ã  la diffÃ©rence du lien physique, aprÃ¨s la destruction de source, le fichier ne sera plus accessible !
   rm source
   gedit lien_symb

On peut dÃ©celer les liens symboliques avec ls -F, ils apparaissent avec un @ Ã  la fin. 
   ls -F

===== Autres documentations disponibles =====
  * [[http://wiki.linux-france.org/wiki/Les_commandes_fondamentales_de_Linux | Explication sur linux-france.org]] *

===== En dual-boot Windows =====
Sur un ordinateur en dual-boot avec Windows, il peut Ãªtre intÃ©ressant de savoir quels liens symboliques ou physiques fonctionnent, puisque depuis Windows 7, en plus des traditionnels raccourcis, Windows offre aussi la possibilitÃ© de faire des liens (cette possibilitÃ© existait auparavant avec l'utilitaire //junction// ).
Bien sÃ»r, comme Windows ne peut pas lire les partitions ext4 et antÃ©rieures, tout lien impliquant une partition de type ext ne pourra pas Ãªtre compris par Windows ne maniÃ¨re native (Ã  voir si cela fonctionne avec les drivers permettant de monter des partitions ext sur Windows).

Par contre, Linux lit nativement les partitions NTFS, donc Linux comme Windows peuvent crÃ©er des liens sur des partitions NTFS.
Empiriquement (d'aprÃ¨s tests sous Windows 7 et Linux Mint 17.3), on remarque que :
  * Aucun lien symbolique crÃ©Ã© sous Linux n'est compris sous Windows
  * Les liens symboliques crÃ©Ã©s sous Windows (commande //MkLink /D//) fonctionnent sous Linux si la cible et le lien sont sur la mÃªme partition NTFS, mais pas s'ils sont sur des partitions diffÃ©rentes.
----

//Contributeurs : Ã  partir des documents citÃ©s, [[utilisateurs:Matifou]], pour l'explication graphique : [[utilisateurs:mohican]] //