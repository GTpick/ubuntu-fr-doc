{{tag>programmation}}

====== Faire de la programmation en ADA sous Ubuntu ======

Le [[http://fr.wikipedia.org/wiki/Ada_(langage)|langage ADA]] est utilisé dans certaines écoles et IUT pour enseigner les concepts fondamentaux de la programmation aux élèves. Nous allons voir ici comment travailler en ADA sous Ubuntu. 

===== Installation du compilateur GNAT ====
La première chose à faire est d'[[:tutoriel:comment_installer_un_paquet#paquet_present_dans_les_depots|installer les paquets]] **[[apt://gnat|gnat]]**.

Une fois ceci terminé, vous pouvez d'ores et déjà commencer à compiler vos programmes ADA de la façon suivante :

Dans votre terminal :
<code>cd repertoire_ada/
gnatmake votre_programme.adb
./votre_programme</code>

La première ligne, avec la commande [[:tutoriel/console_commandes_de_base#cd]], vous permet de vous placer dans le répertoire où vous avez enregistré votre programme ADA.
Exemple : j'ai mis mon programme ADA dans //Documents/IUT/ada//, donc je vais taper //cd Documents/IUT/ada//.

La deuxième ligne compile votre programme ADA. 

La troisième ligne lance le résultat de la commande précédente, qui est le fichier exécutable créé par GNAT. Il a le même nom que votre fichier source sans le .adb .

===== Éditer les fichiers sources =====
==== Emacs ====
Emacs est un éditeur de texte utilisé par de nombreux développeurs. Il permet de travailler rapidement sur les sources et éventuellement de les compiler. La mise en forme du code (coloration syntaxique, indentation et autocomplétion) est parfaitement gérée par Emacs.
=== Editer un fichier dans Emacs ===
Pour éditer un fichier utilisez la commande suivante : 
<code>emacs mon_fichier.adb</code>
//Note : Si vous souhaitez ouvrir plusieurs fichiers à la fois il est conseillé d'utiliser le menu //File → Open File// dans Emacs plutôt que de lancer plusieurs fois la commande ci-dessus. A chaque fois que vous éxecutez cette commande le systéme va créer un nouveau processus ce qui nécessite pas mal de ressources s'il y a beaucoup de fichiers ouverts. Il convient mieux d'avoir un seul processus Emacs avec plusieurs fichiers ouverts à l'interieur.//
=== Compiler dans Emacs ===
Pour compiler avec Emacs, choisissez Compile dans le menu //Tools → Compile//.
Dans le prompt en bas de la fenétre, tapez :
<code>gnatmake mon_fichier.adb</code>

==== Gedit ====
L'éditeur de texte par défaut de Ubuntu, Gedit reconnaît directement la syntaxe ADA. Pour le lancer Accessoires → Éditeur de texte.

=== Compiler directement dans Gedit ===
On va maintenant personnaliser un peu Gedit pour pouvoir compiler et lancer nos programmes directement depuis l'éditeur de texte (façon Adagide ;-) ).

La première chose à faire est d'activer le greffon **Outils externes** dans //Édition → Préférences → Greffons//. Ces outils externes vont nous permettre de définir deux commandes personnalisées pour lancer et compiler nos programmes. Activez-le, puis cliquez sur //Configurer le greffon//.

Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça :
<code>gnatmake $GEDIT_CURRENT_DOCUMENT_NAME -o executable</code>
Vous l'aurez compris, cette commande transmet à GNAT le document courant à compiler, avec le fichier exécutable (-o) dans executable.

Créez ensuite une seconde commande, remplissez les champs précédents (moi j'ai //Exécuter en ADA//, raccourci F4), et dans le champ //Command//:
<code>
gnome-terminal -x bash -c "./executable; read x"
</code>
Cette commande envoie à //gnome-terminal// la commande //./executable//, notre programme ADA compilé précédemment, puis //read x// qui attend une action de l'utilisateur pour fermer le terminal.

Vous n'avez plus qu'à taper F3 pour compiler, et F4 pour exécuter.

==== GPS (Gnat Programming Studio) ====
GPS est un IDE développé par AdaCore. Il permet notamment l'auto-complétion et le débogage. Il supporte nativement le langage ADA, mais également C, JavaScript, Pascal et Python.

Pour obtenir GPS, il suffit d'[[:tutoriel:comment_installer_un_paquet#paquet_present_dans_les_depots|installer le paquet]] **[[apt://gnat-gps|gnat-gps]]**. Il suffit de lancer GPS avec la commande <code>gnat-gps</code>

Lorsque l'on installe le paquet ''gnat-gps'', aucun lanceur n'apparaît dans le menu Application. On peut alors [[raccourci-lanceur#creation_d_un_lanceur_dans_le_menu_de_facon_graphique|en créer un nouveau]] avec la commande ''gnat-gps''.

===== Nettoyage des sources =====
Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez :
<code>
gnatclean *
</code>
dans le répertoire de vos programmes, et GNAT supprimera tous les fichiers à l'exception de vos sources (.adb).
----
//Contributeurs : [[utilisateurs:orkerone|orkerone]], [[utilisateurs:G3o|G3o]]//